Voici un prompt structuré pour Replit :

---

# 🎯 Projet : Fashion AI - Application complète avec Frontend et Backend API

## 📋 Contexte
Transforme le code Streamlit fourni (`fashion_ai.py`) en une application web complète avec :
- **Frontend** : JavaScript/HTML/CSS moderne
- **Backend** : API REST FastAPI  
- **Données** : Firebase simulé (pour les tests)

## 🏗️ Architecture cible
```
Frontend (JavaScript)
  │
  ├── Firebase simulé (JSON local)
  │   ├── Authentification simulée
  │   ├── Profils utilisateurs 
  │   └── Métadonnées vêtements
  │
  └── Backend FastAPI (localhost)
      ├── Génération recommandations IA
      ├── Gestion quotas utilisateurs
      ├── Stockage images (local)
      └── Endpoints API REST
```

## 🎨 Frontend Requirements

### Pages principales :
1. **Authentification** : Login/Register simulé
2. **Profil utilisateur** : Formulaire complet (morphologie, teint, styles préférés, etc.)
3. **Ma garde-robe** : Upload photos + métadonnées vêtements
4. **Recommandations** : Interface pour générer et afficher les tenues

### Fonctionnalités :
- Simulation de 2 types d'utilisateurs : **Freemium** (3 recommandations/jour) vs **Premium** (8 recommandations/jour)
- Upload d'images avec preview
- Formulaires pour saisir les caractéristiques des vêtements (nom, couleur, catégorie, matière)
- Affichage des tenues recommandées avec les vraies images uploadées
- Interface moderne et responsive

### Firebase simulé (JSON local) :
```json
{
  "users": {
    "user_id": {
      "email": "test@email.com",
      "type": "premium|freemium",
      "profile": {
        "morphology": "triangle inversé",
        "skin_tone": "#FFDAB9",
        "preferred_styles": ["élégant", "casual"],
        "size": "M"
      },
      "clothing_items": [
        {
          "id": "item_1",
          "name": "T-shirt blanc",
          "category": "hauts",
          "color": "#FFFFFF",
          "material": "coton",
          "image_path": "images/user_id/item_1.jpg"
        }
      ],
      "daily_usage": {
        "date": "2025-05-28",
        "recommendations_count": 2
      }
    }
  }
}
```

## ⚡ Backend FastAPI Requirements

### Endpoints à créer :
```
POST /auth/login          # Authentification simulée
POST /auth/register       # Création compte simulé
GET  /user/profile        # Récupérer profil utilisateur
PUT  /user/profile        # Modifier profil utilisateur
POST /user/clothing       # Ajouter vêtement (+ upload image)
GET  /user/clothing       # Liste vêtements utilisateur
POST /recommendations     # Générer tenues (logique IA existante)
GET  /user/quota          # Vérifier quotas restants
```

### Fonctionnalités backend :
- **Gestion des quotas** : Limiter les recommandations selon le type d'utilisateur
- **Stockage images** : Sauvegarder localement dans `./images/user_id/`
- **API météo** : Intégrer l'API Weatherstack existante
- **IA Groq** : Utiliser la logique de recommandation existante
- **CORS** : Configurer pour le frontend
- **Validation** : Pydantic models pour les données

### Structure des données :
- Reprendre la logique du `client_profile` et `generate_clothing_database()` existants
- Adapter pour utiliser les vraies données utilisateur au lieu de données aléatoires
- Retourner les chemins des images avec les recommandations

## 🔑 Points critiques à implémenter :

1. **Authentification simulée** : Système simple avec tokens JWT ou sessions
2. **Upload d'images** : Gestion des fichiers avec FastAPI
3. **Quotas dynamiques** : Reset quotidien, vérification avant génération
4. **Recommandations personnalisées** : Utiliser la garde-robe réelle de l'utilisateur
5. **Affichage des tenues** : Retourner les vraies images avec chaque recommandation

## 📦 Structure de fichiers souhaitée :
```
/
├── frontend/
│   ├── index.html
│   ├── css/style.css
│   ├── js/app.js
│   └── js/firebase-simulator.js
├── backend/
│   ├── main.py (FastAPI)
│   ├── models.py (Pydantic)
│   ├── auth.py
│   └── recommendations.py
├── images/ (stockage local)
└── data/users.json (Firebase simulé)
```

## 🎯 Objectif final :
Une démo fonctionnelle où un utilisateur peut :
1. Créer un compte (premium/freemium)
2. Remplir son profil style
3. Uploader ses vêtements avec photos
4. Générer des recommandations personnalisées
5. Voir ses tenues avec les vraies images de sa garde-robe
6. Respecter les limites de quotas

**Réutilise au maximum la logique existante de `fashion_ai.py` en l'adaptant à cette nouvelle architecture !**